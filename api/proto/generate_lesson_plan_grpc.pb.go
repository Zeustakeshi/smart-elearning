// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/generate_lesson_plan.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	L2Tools_GenerateLessonPlan_FullMethodName = "/lesson_plan.L2_tools/GenerateLessonPlan"
)

// L2ToolsClient is the client API for L2Tools service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type L2ToolsClient interface {
	GenerateLessonPlan(ctx context.Context, in *LessonPlanRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LessonPlanResponse], error)
}

type l2ToolsClient struct {
	cc grpc.ClientConnInterface
}

func NewL2ToolsClient(cc grpc.ClientConnInterface) L2ToolsClient {
	return &l2ToolsClient{cc}
}

func (c *l2ToolsClient) GenerateLessonPlan(ctx context.Context, in *LessonPlanRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LessonPlanResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &L2Tools_ServiceDesc.Streams[0], L2Tools_GenerateLessonPlan_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LessonPlanRequest, LessonPlanResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type L2Tools_GenerateLessonPlanClient = grpc.ServerStreamingClient[LessonPlanResponse]

// L2ToolsServer is the server API for L2Tools service.
// All implementations must embed UnimplementedL2ToolsServer
// for forward compatibility.
type L2ToolsServer interface {
	GenerateLessonPlan(*LessonPlanRequest, grpc.ServerStreamingServer[LessonPlanResponse]) error
	mustEmbedUnimplementedL2ToolsServer()
}

// UnimplementedL2ToolsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedL2ToolsServer struct{}

func (UnimplementedL2ToolsServer) GenerateLessonPlan(*LessonPlanRequest, grpc.ServerStreamingServer[LessonPlanResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GenerateLessonPlan not implemented")
}
func (UnimplementedL2ToolsServer) mustEmbedUnimplementedL2ToolsServer() {}
func (UnimplementedL2ToolsServer) testEmbeddedByValue()                 {}

// UnsafeL2ToolsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to L2ToolsServer will
// result in compilation errors.
type UnsafeL2ToolsServer interface {
	mustEmbedUnimplementedL2ToolsServer()
}

func RegisterL2ToolsServer(s grpc.ServiceRegistrar, srv L2ToolsServer) {
	// If the following call pancis, it indicates UnimplementedL2ToolsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&L2Tools_ServiceDesc, srv)
}

func _L2Tools_GenerateLessonPlan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LessonPlanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(L2ToolsServer).GenerateLessonPlan(m, &grpc.GenericServerStream[LessonPlanRequest, LessonPlanResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type L2Tools_GenerateLessonPlanServer = grpc.ServerStreamingServer[LessonPlanResponse]

// L2Tools_ServiceDesc is the grpc.ServiceDesc for L2Tools service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var L2Tools_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lesson_plan.L2_tools",
	HandlerType: (*L2ToolsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateLessonPlan",
			Handler:       _L2Tools_GenerateLessonPlan_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/generate_lesson_plan.proto",
}
